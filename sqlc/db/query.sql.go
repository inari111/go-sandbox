// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const count = `-- name: Count :one
SELECT count(*) FROM users
`

func (q *Queries) Count(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, count)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const create = `-- name: Create :one
INSERT INTO users (
  id, name
) VALUES (
  $1, $2
)
RETURNING id, name
`

type CreateParams struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (User, error) {
	row := q.db.QueryRowContext(ctx, create, arg.ID, arg.Name)
	var i User
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const delete = `-- name: Delete :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) Delete(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, delete, id)
	return err
}

const get = `-- name: Get :one
SELECT id, name FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) Get(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, get, id)
	var i User
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const list = `-- name: List :many
SELECT id, name FROM users
ORDER BY id
`

func (q *Queries) List(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, list)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const update = `-- name: Update :exec
UPDATE users SET name = $2
WHERE id = $1
`

type UpdateParams struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) error {
	_, err := q.db.ExecContext(ctx, update, arg.ID, arg.Name)
	return err
}
